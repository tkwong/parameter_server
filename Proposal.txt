=======================================
===   Additional Feature Proposal   ===
=======================================
----------------
-- Movitation --
----------------
A powerful parameter sever for large-scale data processing.
// Add more... (What is straggler, why are we trying to solve it?)

------------------------
-- Additional Feature --
------------------------
Use Heuristic Scheduling, Job Stealing/Cloning and Hierarchical Architecture to address straggler problems.

----------------------
-- Technique to use --
----------------------
We first divide the straggler problems by their cause.
Transient Stragglers -- Due to background activities, OS, etc.
Permanent Stragglers -- Due to Hardware Partial Failure or Heterogeneous Cluster

Different straggler will be solved using different technique, but we first need a method to distinguish
them. We proposed Hierarchical Architecture for this purpose.

Hierarchical Architecture:
There is an assumption that must hold when applying this technique, that is, a worker machine has more than
one thread. We think this assumption is reasonable for morden computers. Instead of treating a worker thread
as an independent worker, we treat a worker machine as an independent worker. In this way, the time needed
for finishing a task is averaged out by the number of thread a worker has (after solving the transient
stragglers). Therefore, a slow worker has a much higher chance to be a Permanent Straggler than a Transient
Straggler and hence we have distinguish them.

Heuristic Scheduling:
The aim of Heuristic Scheduling is to solve the Permanent Straggler in a global level (among workers). A
scheduler (independent or on server side) will record the time used by each worker for an iteration and
use this to adjust the workload of each worker in the following iteration. The schedule will adopt to the
nearly idea workload for each worker after some iterations and this solved the Permanent Stragglers.

Job Stealing/Cloning:
The Job Stealing/Cloning is used locally (within a worker). If a worker thread does not get a task in the
beginning of an iteration, i.e. the number of tasks the worker received is less than the number of threads
it has, then this thread will clone a task from another thread. During an iteration, if a thread has finished
its task, then it will steal any unstarted task from the slowest thread or start a clone of the task that is 
running on the slowest thread, depending on whether there is any unstarted task. This tries to solve the 
Transient Stragglers.

-------------------
-- Existing Work --
-------------------
Microsoft:Multiverso
Tencent:angel
// Add More... (What have been proposed to address the straggler problem?)

--------------
-- Timeline --
--------------
Week 11 Implement Hierarchical Architecture
Week 12 Implement Job Stealing
Week 13 Implement Heuristic Scheduling
Week 14 Reserved for any delay
